# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t4D5kP6_gwi0eXVaruNYpTRreGTnC3AA
"""

import pandas as pd
import numpy as np
from prophet import Prophet
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error
import xgboost as xgb
import matplotlib.pyplot as plt

# Load CSV
df = pd.read_csv("/content/SuperStoreOrders.csv")

# Convert date columns to datetime
df['order_date'] = pd.to_datetime(df['order_date'], dayfirst=True, errors='coerce')
df['sales'] = df['sales'].astype(str).str.replace(',', '', regex=False).astype(float)

# Drop rows with invalid dates
df = df.dropna(subset=['order_date'])

# Aggregate daily sales
daily_sales = df.groupby('order_date')['sales'].sum().reset_index()
daily_sales = daily_sales.rename(columns={'order_date':'ds','sales':'y'})

prophet_model = Prophet(yearly_seasonality=True, weekly_seasonality=True, daily_seasonality=False)
prophet_model.fit(daily_sales)

# Forecast next 90 days
future = prophet_model.make_future_dataframe(periods=90)
forecast = prophet_model.predict(future)

# Plot Prophet forecast
fig1 = prophet_model.plot(forecast)
plt.title("Next 90 Days Sales Forecast (Prophet)")
plt.show()

# Extract date features
df['year'] = df['order_date'].dt.year
df['month'] = df['order_date'].dt.month
df['day'] = df['order_date'].dt.day
df['day_of_week'] = df['order_date'].dt.dayofweek
df['is_weekend'] = df['day_of_week'].isin([5,6]).astype(int)

# Select features and target
features = ['year','month','day','day_of_week','is_weekend',
            'segment','ship_mode','category','sub_category',
            'discount','profit','shipping_cost']
target = 'sales'

X = df[features]
y = df[target]

# One-hot encode categorical features
X = pd.get_dummies(X, columns=['segment','ship_mode','category','sub_category'])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

xgb_model = xgb.XGBRegressor(
    n_estimators=500,
    learning_rate=0.05,
    max_depth=6,
    subsample=0.8,
    colsample_bytree=0.8,
    random_state=42
)

xgb_model.fit(X_train, y_train)

y_pred = xgb_model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(((y_test - y_pred)**2).mean())

print(f"XGBoost MAE: {mae:.2f}")
print(f"XGBoost RMSE: {rmse:.2f}")

plt.figure(figsize=(12,6))
plt.plot(y_test.values, label='Actual Sales')
plt.plot(y_pred, label='XGBoost Predictions', alpha=0.7)
plt.legend()
plt.title("Actual vs XGBoost Predicted Sales")
plt.show()

# Merge Prophet trend with XGBoost residual predictions
# 1. Use Prophet forecast as trend
trend = forecast[['ds', 'yhat']].tail(90).reset_index(drop=True)

# 2. Aggregate features for next 90 days (example: repeat last known features)
last_features = X.tail(1).copy()
future_features = pd.concat([last_features]*90, ignore_index=True)

# 3. Predict residuals with XGBoost
residuals_pred = xgb_model.predict(future_features)

# 4. Final hybrid forecast
trend['hybrid_forecast'] = trend['yhat'] + residuals_pred

# Plot hybrid forecast
plt.figure(figsize=(12,6))
plt.plot(trend['ds'], trend['hybrid_forecast'], label='Hybrid Forecast', color='green')
plt.title("Hybrid Prophet + XGBoost Next 90 Days Forecast")
plt.xlabel("Date")
plt.ylabel("Sales")
plt.legend()
plt.show()

